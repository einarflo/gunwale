version: "3.9"

services:
  traefik:
    restart: unless-stopped
    image: traefik:v2.11
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=din.epost@domene.no
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/letsencrypt/acme.json
    networks:
      - app-network

  porthuset:
    restart: unless-stopped
    image: porthuset-lamp-backup:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.porthuset.rule=Host(`ovh.porthuset.no`)"
      - "traefik.http.routers.porthuset.entrypoints=websecure"
      - "traefik.http.routers.porthuset.tls.certresolver=myresolver"
    volumes:
      - /home/debian/porthuset:/var/www/html
    networks:
      - app-network

  websocket:
    restart: unless-stopped
    build: ./websocket-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`ovh.tavl.no`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.websocket.entrypoints=websecure"
      - "traefik.http.routers.websocket.tls.certresolver=myresolver"
      - "traefik.http.services.websocket.loadbalancer.server.port=3000"
      - "traefik.http.routers.websocket.service=websocket"
      - "traefik.http.routers.websocket.middlewares=strip-ws"
      - "traefik.http.middlewares.strip-ws.stripprefix.prefixes=/ws"
    networks:
      - app-network

  frontend:
    restart: unless-stopped
    build:
      context: ./frontend
      args:
        REACT_APP_WS_URL: wss://ovh.tavl.no
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`ovh.tavl.no`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - websocket
    networks:
      - app-network

  keycloak-db:
    restart: unless-stopped
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KC_DB_USERNAME}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    restart: unless-stopped
    image: quay.io/keycloak/keycloak:latest
    command: ["start"]
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: "true"
      KC_PROXY: edge
      KC_HOSTNAME: auth.tavl.no
      KC_HOSTNAME_STRICT: "false"
      KC_PROXY_HEADERS: xforwarded
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.keycloak.rule=Host(`auth.tavl.no`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=myresolver"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - app-network

  mothership:
    build: ./mothership
    environment:
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_URL: https://auth.tavl.no
      CLIENT_ID: ${CLIENT_ID}
      DATABASE_CLIENT: mysql
      DATABASE_HOST: mothership-db
      DATABASE_PORT: 3306
      DATABASE_NAME: ${MS_DB_NAME}
      DATABASE_USERNAME: ${MS_DB_USER}
      DATABASE_PASSWORD: ${MS_DB_PASSWORD}
      DATABASE_URL: mysql://{${MS_DB_USER}}:{${MS_DB_PASSWORD}}@mothership-db:3306/{${MS_DB_NAME}}
      NODE_ENV: production
    depends_on:
      mothership-db:
        condition: service_healthy
      keycloak:
        condition: service_started
    restart: unless-stopped
    ports:
      - "1337:1337"
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.mothership.rule=Host(`api.tavl.no`)"
      - "traefik.http.routers.mothership.entrypoints=websecure"
      - "traefik.http.routers.mothership.tls.certresolver=myresolver"
      - "traefik.http.services.mothership.loadbalancer.server.port=1337"

  mothership-db:
    restart: unless-stopped
    image: mysql:8.0
    command: ["--default-authentication-plugin=mysql_native_password"]
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${MS_DB_NAME}
      MYSQL_USER: ${MS_DB_USER}
      MYSQL_PASSWORD: ${MS_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MS_DB_ROOT_PASSWORD}
    volumes:
      - mothership-db-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p$$MYSQL_ROOT_PASSWORD --silent"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  keycloak-db-data:
  mothership-db-data:
